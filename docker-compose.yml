services:
  php-fpm:
    container_name: php
    build:
      context: docker/php-fpm
    volumes:
      - ./:/var/www
      - ./docker/php-fpm/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - ./docker/php-fpm/conf.d/error_reporting.ini:/usr/local/etc/php/conf.d/error_reporting.ini
    environment:
      - PHP_IDE_CONFIG=serverName=full_project
    networks:
      - empty.project.network

  nginx:
    container_name: nginx
    build:
      context: docker/nginx
    volumes:
      - ./:/var/www
    ports:
      - "8080:80"
    depends_on:
      - php-fpm
    networks:
      - empty.project.network

  postgres:
    container_name: postgres
    image: postgres
    restart: always
    networks:
        - empty.project.network
    environment:
        - POSTGRES_DB=${DB_DATABASE}
        - POSTGRES_USER=${DB_USERNAME}
        - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
        - ./docker/postgres/datadir:/var/lib/postgresql/data
    ports:
        - "8432:5432"

  redis:
      container_name: redis
      image: redis:latest
      restart: always
      ports:
          - "8379:6379"
      volumes:
          - ./docker/redis/d–∞ta:/root/redis
          - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
      environment:
          - REDIS_PASSWORD=${REDIS_PASSWORD}
          - REDIS_PORT=${REDIS_PORT}
          - REDIS_DATABASES=16
          - REDIS_HOST_PASSWORD=${REDIS_HOST_PASSWORD}
      command: redis-server --requirepass ${REDIS_HOST_PASSWORD}
      networks:
          - empty.project.network

  rabbitmq:
      container_name: rabbitmq
      image: rabbitmq:3.10.7-management
      hostname: ${RABBITMQ_DEFAULT_HOST}
      environment:
          - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
          - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
          - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
      volumes:
          - ./docker/rabbitmq:/var/lib/rabbitmq
      ports:
          - "15672:15672"
      networks:
          - empty.project.network

  elasticsearch:
      image: elasticsearch:8.0.1
      container_name: elasticsearch
      ports:
          - "9200:9200"
          - "9300:9300"
      volumes:
          - ./docker/elk-config/elasticsearch/data:/usr/share/elasticsearch/data
          - ./docker/elk-config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      environment:
          - discovery.type=single-node
          - http.host=0.0.0.0
          - transport.host=0.0.0.0
          - xpack.security.enabled=false
          - xpack.monitoring.templates.enabled=false
          - cluster.name=elasticsearch
          - bootstrap.memory_lock=true
      networks:
          - empty.project.network

  logstash:
      image: logstash:8.0.1
      container_name: logstash
      ports:
          - "5044:5044"
          - "9600:9600"
      volumes:
          - ./docker/elk-config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
          - ./docker/elk-config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
          - ./docker/elk-config/logstash/data:/usr/share/logstash/data

      networks:
          - empty.project.network
      depends_on:
          - elasticsearch

  kibana:
      image: kibana:8.0.1
      container_name: kibana
      ports:
          - "5601:5601"
      volumes:
          - ./docker/elk-config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
          - ./docker/elk-config/kibana/data:/usr/share/kibana/data
      networks:
          - empty.project.network
      depends_on:
          - elasticsearch

networks:
  empty.project.network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.101.0/28
